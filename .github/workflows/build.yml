name: CI
on:
  pull_request:
    branches: [ '**', '!update/**', '!pr/**' ]
  push:
    branches: [ '**', '!update/**', '!pr/**' ]
    tags: [ v* ]

concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest, macos-13 ]
        include:
          - os: ubuntu-latest
            platform: x86_64-pc-linux
          - os: windows-latest
            platform: x86_64-pc-windows.exe
          - os: macos-latest
            platform: aarch64-apple-darwin
          - os: macos-13
            platform: x86_64-apple-darwin

    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - uses: VirtusLab/scala-cli-setup@main
        with:
          power: 'true'
          jvm: 'graalvm-community@21'
      - run: scala-cli test .
      - id: get_version
        shell: bash
        run: |
          ref="${{github.ref}}"
          if [[ $ref =~ ^"refs/tags/v" ]]; then
            version=${ref#refs/tags/v}
          else
            sha="${{github.sha}}"
            version=${sha:0:8}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Build native image
        run: |
          mkdir -p target
          scala-cli package --native-image --graalvm-jvm-id graalvm-community@21 \
          -o target/micro-maven-resolver-${{matrix.platform}} . -- \
          --no-fallback --strict-image-heap -march=native
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: micro-maven-resolver-${{steps.get_version.outputs.version}}-${{matrix.platform}}
          path: target/micro-maven-resolver-${{matrix.platform}}

  publish:
    name: Publish Artifacts
    needs: [ build ]
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: assets
      - id: assets
        run: |
          # Get the absolute path of the assets directory
          ASSETS_DIR=$(realpath assets)
          # Find all files matching a pattern in the assets directory and emit them as absolute paths
          files=$(find $ASSETS_DIR -type f | tr '\n' ',' | sed 's/,$//')
          echo "::set-output name=files::$files"
      - name: Upload release binaries
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          files: "${{ steps.assets.outputs.files }}"
